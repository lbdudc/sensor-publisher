/*% if (feature.MWM_TrajectoryExploitation) { %*/
import { HTTP } from "@/common/http-common";
import Logger from "js-logger";

const logger = Logger.get("logger");
const RESOURCE_NAME = "trajectory_exploitation";
const ACTIVITIES_RESOURCE_NAME = `${RESOURCE_NAME}/activities`;
const CATEGORIES_RESOURCE_NAME = `${RESOURCE_NAME}/activity_categories/`;
const CLIENTS_RESOURCE_NAME = `${RESOURCE_NAME}/clients`;
const EMPLOYEES_RESOURCE_NAME = `${RESOURCE_NAME}/employees`;
const EVENTS_RESOURCE_NAME = `${RESOURCE_NAME}/events`;

export default {
  async getAllActivities(options = {}) {
    try {
      return (await HTTP.get(ACTIVITIES_RESOURCE_NAME, options)).data;
    } catch (err) {
      logger.error("Error fetching all activities", options);
      throw err;
    }
  },

  async getActivitiesByPoint(options) {
    try {
      return (await HTTP.get(
        `${ACTIVITIES_RESOURCE_NAME}/find-by-point`,
        options
      )).data;
    } catch (err) {
      logger.error("Error fetching activities by point", options);
      throw err;
    }
  },

  async getFirstDay() {
    try {
      return (await HTTP.get(`${ACTIVITIES_RESOURCE_NAME}/first-day`)).data;
    } catch (err) {
      logger.error("Error getting first day");
      throw err;
    }
  },

  async getLastDay() {
    try {
      return (await HTTP.get(`${ACTIVITIES_RESOURCE_NAME}/last-day`)).data;
    } catch (err) {
      logger.error("Error getting last day");
      throw err;
    }
  },

  async getStatistics(options = {}) {
    try {
      return (
        await HTTP.get(`${ACTIVITIES_RESOURCE_NAME}/statistics`, options)
      ).data;
    } catch (err) {
      logger.error("Error getting statistics", options);
      throw err;
    }
  },

  async getAllActivityCategories() {
    try {
      return (await HTTP.get(CATEGORIES_RESOURCE_NAME)).data;
    } catch (err) {
      logger.error("Error fetching all activity categories");
      throw err;
    }
  },

  async getAllClients() {
    try {
      return (await HTTP.get(CLIENTS_RESOURCE_NAME)).data;
    } catch (err) {
      logger.error("Error fetching all clients");
      throw err;
    }
  },

  async getClient(id) {
    try {
      return (await HTTP.get(`${CLIENTS_RESOURCE_NAME}/${id}`)).data;
    } catch (err) {
      logger.error("Error fetching client with id " + id);
      throw err;
    }
  },

  async getClientsWithVisitsBetween(start, end, state) {
    try {
      return (await HTTP.get(`${CLIENTS_RESOURCE_NAME}/with-visits`, {
        params: {
          start: start,
          end: end,
          state: state,
        },
      })).data;
    } catch (err) {
      logger.error(
        "Error fetching clients with visits between",
        start,
        end,
        state
      );
      throw err;
    }
  },

  async getAllEmployees() {
    try {
      return (await HTTP.get(EMPLOYEES_RESOURCE_NAME)).data;
    } catch (err) {
      logger.error("Error fetching all employees");
      throw err;
    }
  },

  async getEmployee(id) {
    try {
      return (await HTTP.get(`${EMPLOYEES_RESOURCE_NAME}/${id}`)).data;
    } catch (err) {
      logger.error("Error fetching employee with id" + id);
      throw err;
    }
  },

  async getEmployeesWithVisitsBetween(start, end, state) {
    try {
      return (await HTTP.get(`${EMPLOYEES_RESOURCE_NAME}/with-visits`, {
        params: {
          start: start,
          end: end,
          state: state,
        },
      })).data;
    } catch (err) {
      logger.error(
        "Error fetching all employees with visits between",
        start,
        end,
        state
      );
      throw err;
    }
  },

  async getEmployeesWithActivitiesBetween(start, end) {
    try {
      return (await HTTP.get(`${EMPLOYEES_RESOURCE_NAME}/with-activities`, {
        params: {
          start: start,
          end: end,
        },
      })).data;
    } catch (err) {
      logger.error(
        "Error fetching all employees with activities between",
        start,
        end
      );
      throw err;
    }
  },

  async getAllEvents(options = {}) {
    try {
      return (await HTTP.get(EVENTS_RESOURCE_NAME, options)).data;
    } catch (err) {
      logger.error("Error fetching all events", options);
      throw err;
    }
  },

  async getAllEventsById(idList, pageNum, pageSize) {
    try {
      return (await HTTP.get(`${EVENTS_RESOURCE_NAME}/id-search`, {
        params: {
          page: pageNum - 1, // XXX Necessary due to server pagination starts by 0
          size: pageSize,
          list: idList.toString(),
        },
      })).data;
    } catch (err) {
      logger.error(
        "Error fetching all events by ids",
        idList,
        pageNum,
        pageSize
      );
      throw err;
    }
  },

  async getEventsClustered(options = {}) {
    try {
      return (await HTTP.get(`${EVENTS_RESOURCE_NAME}/clusters`, options)).data;
    } catch (err) {
      logger.error("Error fetching all events clustered", options);
      throw err;
    }
  },

  async getEvent(id) {
    try {
      return (await HTTP.get(`${EVENTS_RESOURCE_NAME}/${id}`)).data;
    } catch (err) {
      logger.error("Error fetching event with id " + id);
      throw err;
    }
  },

  async getClientsVisitStatistics(options = {}) {
    try {
      return (await HTTP.get(`${CLIENTS_RESOURCE_NAME}/statistics`, options))
        .data;
    } catch (err) {
      logger.error("Error getting clients visit statistics", options);
      throw err;
    }
  },

  async getEmployeesVisitStatistics(options = {}) {
    try {
      return (await HTTP.get(`${EMPLOYEES_RESOURCE_NAME}/statistics`, options))
        .data;
    } catch (err) {
      logger.error("Error getting employees visit statistics", options);
      throw err;
    }
  },
};
/*% } %*/
