/*% if (feature.MWM_TrajectoryExploitation) { %*/
package es.udc.lbd.gema.lps.component.trajectory_exploitation;

import es.udc.lbd.gema.lps.component.gema.model.service.ClientService;
import es.udc.lbd.gema.lps.component.gema.model.service.dto.ClientDTO;
import es.udc.lbd.gema.lps.component.gema.model.service.dto.ClientFullDTO;
/*% if (feature.MWM_TE_VisitsRecord) { %*/
import es.udc.lbd.gema.lps.component.gema.model.domain.PlannedEventState;
import es.udc.lbd.gema.lps.component.gema.model.service.dto.ClientStatisticsDTO;
import java.time.LocalDate;
import org.springframework.format.annotation.DateTimeFormat;
/*% } %*/
import java.util.List;
import javax.inject.Inject;
import net.kaczmarzyk.spring.data.jpa.domain.In;
import net.kaczmarzyk.spring.data.jpa.web.annotation.Spec;
import org.locationtech.jts.geom.Geometry;
import org.locationtech.jts.io.ParseException;
import org.locationtech.jts.io.WKTReader;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(ClientResource.CLIENT_RESOURCE_URL)
public class ClientResource {

  public static final String CLIENT_RESOURCE_URL = "/api/trajectory_exploitation/clients";

  private static final Logger log = LoggerFactory.getLogger(ClientResource.class);

  @Inject private ClientService clientService;

  @GetMapping
  public ResponseEntity<List<ClientDTO>> findAll(
    @Spec(path = "fullName", paramSeparator = ',', spec = In.class) Specification spec,
    @RequestParam(name = "bbox", required = false) String wkt) {

    List<ClientDTO> clientsDTO;
    Geometry bbox = null;

    if (wkt != null) {
      WKTReader reader = new WKTReader();
      try {
        bbox = reader.read(wkt);
      } catch (ParseException e) {
        return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
      }
    }
    clientsDTO = clientService.findAll(spec, bbox);
    return new ResponseEntity<>(clientsDTO, HttpStatus.OK);
  }

  @GetMapping("/{id}")
  public ResponseEntity<ClientFullDTO> findById(@PathVariable Long id) {
    ClientFullDTO clientFullDTO = clientService.findById(id);
    if (clientFullDTO != null) {
      return new ResponseEntity<>(clientFullDTO, HttpStatus.OK);
    } else {
      return new ResponseEntity<>(HttpStatus.NOT_FOUND);
    }
  }

  /*% if (feature.MWM_TE_VisitsRecord) { %*/
  @GetMapping("/with-visits")
  public ResponseEntity<List<ClientDTO>> findByHasVisitsBetween(
    @RequestParam(name = "start", required = true)
          @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
          LocalDate start,
    @RequestParam(name = "end", required = false)
          @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
          LocalDate end,
    @RequestParam(name = "state", required = false) PlannedEventState state) {
    List<ClientDTO> clientsDTO = clientService.findByHasVisitsBetween(start, end, state);
    return new ResponseEntity<>(clientsDTO, HttpStatus.OK);
  }

  @GetMapping("/statistics")
  public ResponseEntity<List<ClientStatisticsDTO>> getVisitsStatistics(
	  @RequestParam(name = "start", required = false)
          @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
          LocalDate start,
      @RequestParam(name = "end", required = false)
          @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
          LocalDate end,
    @RequestParam(name="clients", required = false) List<Long> clients,
    @RequestParam(name = "employees", required = false) List<Long> employees,
    @RequestParam(name = "type", required = false) String type) {
	  List <ClientStatisticsDTO> statistics = clientService.getVisitsStatistics(clients, employees, start, end, type);
	  return new ResponseEntity<List<ClientStatisticsDTO>>(statistics, HttpStatus.OK);
  }
  /*% } %*/
}
/*% } %*/
