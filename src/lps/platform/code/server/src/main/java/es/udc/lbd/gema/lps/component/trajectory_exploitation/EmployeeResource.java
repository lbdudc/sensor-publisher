/*% if (feature.MWM_TrajectoryExploitation) { %*/
package es.udc.lbd.gema.lps.component.trajectory_exploitation;

import es.udc.lbd.gema.lps.component.gema.model.domain.PlannedEvent;
import es.udc.lbd.gema.lps.component.gema.model.domain.PlannedEventState;
import es.udc.lbd.gema.lps.component.gema.model.domain.enums.AdvancedQueryTemporalRelation;
import es.udc.lbd.gema.lps.component.gema.model.domain.enums.AdvancedQueryTimeComparation;
import es.udc.lbd.gema.lps.component.gema.model.domain.enums.DelimitedZoneSearchType;
import es.udc.lbd.gema.lps.component.gema.model.service.ActivityService;
import es.udc.lbd.gema.lps.component.gema.model.domain.ActivityCategory;
import es.udc.lbd.gema.lps.component.gema.model.service.dto.PlannedEventDTO;
import es.udc.lbd.gema.lps.component.gema.model.service.PlannedEventService;
import es.udc.lbd.gema.lps.component.gema.model.service.dto.ActivityDTO;
import es.udc.lbd.gema.lps.component.gema.model.service.dto.ActivityCategoryDTO;
import es.udc.lbd.gema.lps.component.gema.model.service.dto.ActivityRequestDTO;
import es.udc.lbd.gema.lps.component.gema.model.service.dto.EmployeeDTO;
import es.udc.lbd.gema.lps.component.gema.model.service.dto.EmployeeFullDTO;
import es.udc.lbd.gema.lps.component.gema.model.service.EmployeeService;
import java.util.List;
import java.time.LocalDate;
import java.time.Instant;
import java.time.ZoneId;
import javax.inject.Inject;
import net.kaczmarzyk.spring.data.jpa.domain.*;
import net.kaczmarzyk.spring.data.jpa.web.annotation.And;
import net.kaczmarzyk.spring.data.jpa.web.annotation.Spec;
import org.locationtech.jts.geom.Geometry;
import org.locationtech.jts.io.ParseException;
import org.locationtech.jts.io.WKTReader;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
/*% if (feature.MWM_TE_VisitsRecord) { %*/
import es.udc.lbd.gema.lps.component.gema.model.domain.PlannedEventState;
import es.udc.lbd.gema.lps.component.gema.model.service.dto.EmployeeStatisticsDTO;
import org.springframework.format.annotation.DateTimeFormat;
/*% } %*/
/*% if (feature.MWM_EmployeeAuthentication) { %*/
import es.udc.lbd.gema.lps.component.gema.model.service.exception.ForbiddenUserException;

/*% } %*/
@RestController
@RequestMapping(EmployeeResource.EMPLOYEE_RESOURCE_URL)
public class EmployeeResource {

  public static final String EMPLOYEE_RESOURCE_URL = "/api/trajectory_exploitation/employees";

  private static final Logger log = LoggerFactory.getLogger(EmployeeResource.class);

  /*% if (feature.MWM_TE_Realtime || feature.MWM_TE_Planning || feature.MWM_TE_ActivitiesRecord || feature.MWM_TE_VisitsRecord) { %*/
  @Inject private EmployeeService employeeService;
  /*% } %*/
  /*% if (feature.MWM_TE_Planning) { %*/
  @Inject private ActivityService activityService;
  @Inject private PlannedEventService plannedEventService;
  /*% } %*/

  /*% if (feature.MWM_TE_Realtime || feature.MWM_TE_Planning || feature.MWM_TE_ActivitiesRecord || feature.MWM_TE_VisitsRecord) { %*/
  @GetMapping
  public ResponseEntity<List<EmployeeDTO>> findAllWithCurrentPosition(
    @Spec(path = "fullName", paramSeparator = ',', spec = In.class) Specification spec,
    @RequestParam(name = "bbox", required = false) String wkt) {

    List<EmployeeDTO> employeesDTO;
    Geometry bbox = null;

    if (wkt != null) {
      WKTReader reader = new WKTReader();
      try {
        bbox = reader.read(wkt);
      } catch (ParseException e) {
        return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
      }
    }

    employeesDTO = employeeService.findAll(spec, bbox);

    return new ResponseEntity<>(employeesDTO, HttpStatus.OK);
  }
  /*% } %*/
  /*% if (feature.MWM_TE_Realtime || feature.MWM_TE_ActivitiesRecord) { %*/
  @GetMapping("/{id}")
  public ResponseEntity<EmployeeFullDTO> findById(@PathVariable Long id) {
    /*% if (feature.MWM_EmployeeAuthentication) { %*/
    EmployeeFullDTO employeeFullDTO;
    try {
      employeeFullDTO = employeeService.findById(id);
    } catch (ForbiddenUserException e) {
		  return new ResponseEntity<>(HttpStatus.FORBIDDEN);
    }
    /*% } else { %*/
    EmployeeFullDTO employeeFullDTO = employeeService.findById(id);
    /*% } %*/
    if (employeeFullDTO != null) {
      return new ResponseEntity<>(employeeFullDTO, HttpStatus.OK);
    } else {
      return new ResponseEntity<>(HttpStatus.NOT_FOUND);
    }
  }
  /*% } %*/

  /*% if (feature.MWM_TE_Planning) { %*/
  @GetMapping("/{id}/activities")
  public ResponseEntity<List<ActivityDTO>> findActivitiesByEmployeeId(
    @RequestParam(name = "category", required = false) List<Long> categories,
    @RequestParam(name = "start", required = false)
    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
      LocalDate start,
    @RequestParam(name = "end", required = false)
    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
      LocalDate end,
    @PathVariable List<Long> id,
    @RequestParam(name = "event", required = false) List<Long> event,
    @RequestParam(name = "client", required = false) List<Long> client,
    @RequestParam(name = "bbox", required = false) String wkt,
    @RequestParam(name = "delimitedZoneSearchType", required = false)
      DelimitedZoneSearchType delimitedZoneSearchType,
    @RequestParam(name = "beforeAfterSearch", required = false)
      AdvancedQueryTemporalRelation advancedQueryTemporalRelation,
    @RequestParam(name = "activityCatSearch", required = false) Long categoryToSearch,
    @RequestParam(name = "greaterLessSearch", required = false)
      AdvancedQueryTimeComparation advancedQueryTimeComparation,
    @RequestParam(name = "activityDuration", required = false) Long advancedQueryTime) {

    List<ActivityDTO> activitiesDTO;
    Geometry bbox = null;

    if (wkt != null) {
      WKTReader reader = new WKTReader();
      try {
        bbox = reader.read(wkt);
      } catch (ParseException e) {
        return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
      }
    }

    activitiesDTO = null;
    activityService.findAll(
      categories,
      start,
      end,
      id,
      client,
      event,
      bbox,
      delimitedZoneSearchType,
      advancedQueryTemporalRelation,
      categoryToSearch,
      advancedQueryTimeComparation,
      advancedQueryTime);

    return new ResponseEntity<>(activitiesDTO, HttpStatus.OK);
  }

  @PostMapping("/{id}/activities")
  public ResponseEntity<List<ActivityDTO>> findActivitiesByEmployeeIdAndPost(
    @RequestBody ActivityRequestDTO activityRequestDTO, @PathVariable List<Long> id) {
    List<ActivityDTO> activitiesDTO = null;
    activityService.findAll(
      activityRequestDTO.getCategories(),
      activityRequestDTO.getStart(),
      activityRequestDTO.getEnd(),
      id,
      activityRequestDTO.getClient(),
      activityRequestDTO.getEvent(),
      activityRequestDTO.getBbox(),
      activityRequestDTO.getDelimitedZoneSearchType(),
      activityRequestDTO.getAdvancedQueryTemporalRelation(),
      activityRequestDTO.getCategoryToSearch(),
      activityRequestDTO.getAdvancedQueryTimeComparation(),
      activityRequestDTO.getAdvancedQueryTime());

    return new ResponseEntity<>(activitiesDTO, HttpStatus.OK);
  }

  @GetMapping("/{id}/events")
  public ResponseEntity<List<PlannedEventDTO>> findEventsByEmployeeId(
    @And({
      @Spec(
        path = "date",
        params = "start",
        config = "uuuu-MM-dd'T'HH:mm:ss.SSS'Z'",
        spec = GreaterThanOrEqual.class),
      @Spec(
        path = "date",
        params = "end",
        config = "uuuu-MM-dd'T'HH:mm:ss.SSS'Z'",
        spec = LessThanOrEqual.class),
      @Spec(path = "employee.id", pathVars = "id", spec = Equal.class),
      @Spec(path = "client.id", paramSeparator = ',', params = "client", spec = In.class),
      @Spec(path = "description", spec = Like.class),
      @Spec(path = "state", spec = Equal.class)
    })
      Specification<PlannedEvent> specification,
    @RequestParam(name = "label", required = false) List<String> label,
    @RequestParam(name = "bbox", required = false) String wkt) {

    List<PlannedEventDTO> eventsDTO;
    Geometry bbox = null;

    if (wkt != null) {
      WKTReader reader = new WKTReader();
      try {
        bbox = reader.read(wkt);
      } catch (ParseException e) {
        return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
      }
    }

    eventsDTO = plannedEventService.findAll(specification, label, bbox);

    return new ResponseEntity<>(eventsDTO, HttpStatus.OK);
  }
  /*% } %*/
  /*% if (feature.MWM_TE_ActivitiesRecord) { %*/
  @GetMapping("/with-activities")
  public ResponseEntity<List<EmployeeDTO>> findByHasActivitiesBetween(
    @RequestParam(name = "start", required = true)
          @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
          LocalDate start,
    @RequestParam(name = "end", required = false)
          @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
          LocalDate end) {
    List<EmployeeDTO> employeesDTO = employeeService.findByHasActivitiesBetween(start, end);
    return new ResponseEntity<>(employeesDTO, HttpStatus.OK);
  }
  /*% } %*/
  /*% if (feature.MWM_TE_VisitsRecord) { %*/
  @GetMapping("/with-visits")
  public ResponseEntity<List<EmployeeDTO>> findByHasVisitsBetween(
    @RequestParam(name = "start", required = true)
          @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
          LocalDate start,
    @RequestParam(name = "end", required = false)
          @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
          LocalDate end,
    @RequestParam(name = "state", required = false) PlannedEventState state) {
    List<EmployeeDTO> employeesDTO = employeeService.findByHasVisitsBetween(start, end, state);
    return new ResponseEntity<>(employeesDTO, HttpStatus.OK);
  }

  @GetMapping("/statistics")
  public ResponseEntity<List<EmployeeStatisticsDTO>> getVisitsStatistics(
      @RequestParam(name = "start", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
          LocalDate start,
      @RequestParam(name = "end", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME)
          LocalDate end,
          @RequestParam(name = "clients", required = false) List<Long> clients,
      @RequestParam(name = "employees", required = false) List<Long> employees,
      @RequestParam(name = "type", required = false) String type) {
    List<EmployeeStatisticsDTO> statistics =
        employeeService.getVisitsStatistics(clients, employees, start, end, type);
    return new ResponseEntity<List<EmployeeStatisticsDTO>>(statistics, HttpStatus.OK);
  }
  /*% } %*/
}
/*% } %*/
